// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	sync "sync"

	mock "github.com/stretchr/testify/mock"

	worker "github.com/SyntaxErrorLineNULL/worker"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// GetError provides a mock function with given fields:
func (_m *Worker) GetError() chan *worker.Error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetError")
	}

	var r0 chan *worker.Error
	if rf, ok := ret.Get(0).(func() chan *worker.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *worker.Error)
		}
	}

	return r0
}

// Worker_GetError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetError'
type Worker_GetError_Call struct {
	*mock.Call
}

// GetError is a helper method to define mock.On call
func (_e *Worker_Expecter) GetError() *Worker_GetError_Call {
	return &Worker_GetError_Call{Call: _e.mock.On("GetError")}
}

func (_c *Worker_GetError_Call) Run(run func()) *Worker_GetError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_GetError_Call) Return(_a0 chan *worker.Error) *Worker_GetError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_GetError_Call) RunAndReturn(run func() chan *worker.Error) *Worker_GetError_Call {
	_c.Call.Return(run)
	return _c
}

// GetRetry provides a mock function with given fields:
func (_m *Worker) GetRetry() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRetry")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Worker_GetRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRetry'
type Worker_GetRetry_Call struct {
	*mock.Call
}

// GetRetry is a helper method to define mock.On call
func (_e *Worker_Expecter) GetRetry() *Worker_GetRetry_Call {
	return &Worker_GetRetry_Call{Call: _e.mock.On("GetRetry")}
}

func (_c *Worker_GetRetry_Call) Run(run func()) *Worker_GetRetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_GetRetry_Call) Return(_a0 int32) *Worker_GetRetry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_GetRetry_Call) RunAndReturn(run func() int32) *Worker_GetRetry_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields:
func (_m *Worker) GetStatus() worker.Status {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 worker.Status
	if rf, ok := ret.Get(0).(func() worker.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(worker.Status)
	}

	return r0
}

// Worker_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type Worker_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
func (_e *Worker_Expecter) GetStatus() *Worker_GetStatus_Call {
	return &Worker_GetStatus_Call{Call: _e.mock.On("GetStatus")}
}

func (_c *Worker_GetStatus_Call) Run(run func()) *Worker_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_GetStatus_Call) Return(_a0 worker.Status) *Worker_GetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_GetStatus_Call) RunAndReturn(run func() worker.Status) *Worker_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function with given fields: wg
func (_m *Worker) Restart(wg *sync.WaitGroup) {
	_m.Called(wg)
}

// Worker_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type Worker_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - wg *sync.WaitGroup
func (_e *Worker_Expecter) Restart(wg interface{}) *Worker_Restart_Call {
	return &Worker_Restart_Call{Call: _e.mock.On("Restart", wg)}
}

func (_c *Worker_Restart_Call) Run(run func(wg *sync.WaitGroup)) *Worker_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sync.WaitGroup))
	})
	return _c
}

func (_c *Worker_Restart_Call) Return() *Worker_Restart_Call {
	_c.Call.Return()
	return _c
}

func (_c *Worker_Restart_Call) RunAndReturn(run func(*sync.WaitGroup)) *Worker_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// SetContext provides a mock function with given fields: ctx
func (_m *Worker) SetContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_SetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContext'
type Worker_SetContext_Call struct {
	*mock.Call
}

// SetContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Worker_Expecter) SetContext(ctx interface{}) *Worker_SetContext_Call {
	return &Worker_SetContext_Call{Call: _e.mock.On("SetContext", ctx)}
}

func (_c *Worker_SetContext_Call) Run(run func(ctx context.Context)) *Worker_SetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Worker_SetContext_Call) Return(_a0 error) *Worker_SetContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_SetContext_Call) RunAndReturn(run func(context.Context) error) *Worker_SetContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetQueue provides a mock function with given fields: queue
func (_m *Worker) SetQueue(queue chan worker.Task) error {
	ret := _m.Called(queue)

	if len(ret) == 0 {
		panic("no return value specified for SetQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(chan worker.Task) error); ok {
		r0 = rf(queue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Worker_SetQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetQueue'
type Worker_SetQueue_Call struct {
	*mock.Call
}

// SetQueue is a helper method to define mock.On call
//   - queue chan worker.Task
func (_e *Worker_Expecter) SetQueue(queue interface{}) *Worker_SetQueue_Call {
	return &Worker_SetQueue_Call{Call: _e.mock.On("SetQueue", queue)}
}

func (_c *Worker_SetQueue_Call) Run(run func(queue chan worker.Task)) *Worker_SetQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan worker.Task))
	})
	return _c
}

func (_c *Worker_SetQueue_Call) Return(_a0 error) *Worker_SetQueue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_SetQueue_Call) RunAndReturn(run func(chan worker.Task) error) *Worker_SetQueue_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: wg
func (_m *Worker) Start(wg *sync.WaitGroup) {
	_m.Called(wg)
}

// Worker_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Worker_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - wg *sync.WaitGroup
func (_e *Worker_Expecter) Start(wg interface{}) *Worker_Start_Call {
	return &Worker_Start_Call{Call: _e.mock.On("Start", wg)}
}

func (_c *Worker_Start_Call) Run(run func(wg *sync.WaitGroup)) *Worker_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sync.WaitGroup))
	})
	return _c
}

func (_c *Worker_Start_Call) Return() *Worker_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *Worker_Start_Call) RunAndReturn(run func(*sync.WaitGroup)) *Worker_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Worker) Stop() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Worker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Worker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Worker_Expecter) Stop() *Worker_Stop_Call {
	return &Worker_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Worker_Stop_Call) Run(run func()) *Worker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_Stop_Call) Return(_a0 <-chan struct{}) *Worker_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_Stop_Call) RunAndReturn(run func() <-chan struct{}) *Worker_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Worker) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Worker_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Worker_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Worker_Expecter) String() *Worker_String_Call {
	return &Worker_String_Call{Call: _e.mock.On("String")}
}

func (_c *Worker_String_Call) Run(run func()) *Worker_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Worker_String_Call) Return(_a0 string) *Worker_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Worker_String_Call) RunAndReturn(run func() string) *Worker_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
