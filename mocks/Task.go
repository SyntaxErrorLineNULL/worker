// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	sync "sync"

	mock "github.com/stretchr/testify/mock"
)

// Task is an autogenerated mock type for the Task type
type Task struct {
	mock.Mock
}

type Task_Expecter struct {
	mock *mock.Mock
}

func (_m *Task) EXPECT() *Task_Expecter {
	return &Task_Expecter{mock: &_m.Mock}
}

// GetError provides a mock function with given fields:
func (_m *Task) GetError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Task_GetError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetError'
type Task_GetError_Call struct {
	*mock.Call
}

// GetError is a helper method to define mock.On call
func (_e *Task_Expecter) GetError() *Task_GetError_Call {
	return &Task_GetError_Call{Call: _e.mock.On("GetError")}
}

func (_c *Task_GetError_Call) Run(run func()) *Task_GetError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Task_GetError_Call) Return(_a0 error) *Task_GetError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Task_GetError_Call) RunAndReturn(run func() error) *Task_GetError_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields:
func (_m *Task) Run() {
	_m.Called()
}

// Task_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Task_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *Task_Expecter) Run() *Task_Run_Call {
	return &Task_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *Task_Run_Call) Run(run func()) *Task_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Task_Run_Call) Return() *Task_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *Task_Run_Call) RunAndReturn(run func()) *Task_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetContext provides a mock function with given fields: ctx
func (_m *Task) SetContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Task_SetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetContext'
type Task_SetContext_Call struct {
	*mock.Call
}

// SetContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Task_Expecter) SetContext(ctx interface{}) *Task_SetContext_Call {
	return &Task_SetContext_Call{Call: _e.mock.On("SetContext", ctx)}
}

func (_c *Task_SetContext_Call) Run(run func(ctx context.Context)) *Task_SetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Task_SetContext_Call) Return(_a0 error) *Task_SetContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Task_SetContext_Call) RunAndReturn(run func(context.Context) error) *Task_SetContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetDoneChannel provides a mock function with given fields: done
func (_m *Task) SetDoneChannel(done chan struct{}) error {
	ret := _m.Called(done)

	if len(ret) == 0 {
		panic("no return value specified for SetDoneChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(chan struct{}) error); ok {
		r0 = rf(done)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Task_SetDoneChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDoneChannel'
type Task_SetDoneChannel_Call struct {
	*mock.Call
}

// SetDoneChannel is a helper method to define mock.On call
//   - done chan struct{}
func (_e *Task_Expecter) SetDoneChannel(done interface{}) *Task_SetDoneChannel_Call {
	return &Task_SetDoneChannel_Call{Call: _e.mock.On("SetDoneChannel", done)}
}

func (_c *Task_SetDoneChannel_Call) Run(run func(done chan struct{})) *Task_SetDoneChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan struct{}))
	})
	return _c
}

func (_c *Task_SetDoneChannel_Call) Return(_a0 error) *Task_SetDoneChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Task_SetDoneChannel_Call) RunAndReturn(run func(chan struct{}) error) *Task_SetDoneChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SetWaitGroup provides a mock function with given fields: wg
func (_m *Task) SetWaitGroup(wg *sync.WaitGroup) error {
	ret := _m.Called(wg)

	if len(ret) == 0 {
		panic("no return value specified for SetWaitGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sync.WaitGroup) error); ok {
		r0 = rf(wg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Task_SetWaitGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWaitGroup'
type Task_SetWaitGroup_Call struct {
	*mock.Call
}

// SetWaitGroup is a helper method to define mock.On call
//   - wg *sync.WaitGroup
func (_e *Task_Expecter) SetWaitGroup(wg interface{}) *Task_SetWaitGroup_Call {
	return &Task_SetWaitGroup_Call{Call: _e.mock.On("SetWaitGroup", wg)}
}

func (_c *Task_SetWaitGroup_Call) Run(run func(wg *sync.WaitGroup)) *Task_SetWaitGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sync.WaitGroup))
	})
	return _c
}

func (_c *Task_SetWaitGroup_Call) Return(_a0 error) *Task_SetWaitGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Task_SetWaitGroup_Call) RunAndReturn(run func(*sync.WaitGroup) error) *Task_SetWaitGroup_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Task) Stop() {
	_m.Called()
}

// Task_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Task_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Task_Expecter) Stop() *Task_Stop_Call {
	return &Task_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Task_Stop_Call) Run(run func()) *Task_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Task_Stop_Call) Return() *Task_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *Task_Stop_Call) RunAndReturn(run func()) *Task_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Task) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Task_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Task_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Task_Expecter) String() *Task_String_Call {
	return &Task_String_Call{Call: _e.mock.On("String")}
}

func (_c *Task_String_Call) Run(run func()) *Task_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Task_String_Call) Return(_a0 string) *Task_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Task_String_Call) RunAndReturn(run func() string) *Task_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewTask creates a new instance of Task. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *Task {
	mock := &Task{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
