// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Processing is an autogenerated mock type for the Processing type
type Processing struct {
	mock.Mock
}

type Processing_Expecter struct {
	mock *mock.Mock
}

func (_m *Processing) EXPECT() *Processing_Expecter {
	return &Processing_Expecter{mock: &_m.Mock}
}

// ErrorHandler provides a mock function with given fields: ctx, input
func (_m *Processing) ErrorHandler(ctx context.Context, input interface{}) (interface{}, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ErrorHandler")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processing_ErrorHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorHandler'
type Processing_ErrorHandler_Call struct {
	*mock.Call
}

// ErrorHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - input interface{}
func (_e *Processing_Expecter) ErrorHandler(ctx interface{}, input interface{}) *Processing_ErrorHandler_Call {
	return &Processing_ErrorHandler_Call{Call: _e.mock.On("ErrorHandler", ctx, input)}
}

func (_c *Processing_ErrorHandler_Call) Run(run func(ctx context.Context, input interface{})) *Processing_ErrorHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Processing_ErrorHandler_Call) Return(_a0 interface{}, _a1 error) *Processing_ErrorHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Processing_ErrorHandler_Call) RunAndReturn(run func(context.Context, interface{}) (interface{}, error)) *Processing_ErrorHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Processing provides a mock function with given fields: ctx, input
func (_m *Processing) Processing(ctx context.Context, input interface{}) (interface{}, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Processing")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Processing_Processing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Processing'
type Processing_Processing_Call struct {
	*mock.Call
}

// Processing is a helper method to define mock.On call
//   - ctx context.Context
//   - input interface{}
func (_e *Processing_Expecter) Processing(ctx interface{}, input interface{}) *Processing_Processing_Call {
	return &Processing_Processing_Call{Call: _e.mock.On("Processing", ctx, input)}
}

func (_c *Processing_Processing_Call) Run(run func(ctx context.Context, input interface{})) *Processing_Processing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Processing_Processing_Call) Return(_a0 interface{}, _a1 error) *Processing_Processing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Processing_Processing_Call) RunAndReturn(run func(context.Context, interface{}) (interface{}, error)) *Processing_Processing_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessing creates a new instance of Processing. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessing(t interface {
	mock.TestingT
	Cleanup(func())
}) *Processing {
	mock := &Processing{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
